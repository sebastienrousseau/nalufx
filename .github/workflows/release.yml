name: 🧪 Release

on:
  push:
    branches:
      - main
      - feat/nalufx
  pull_request:
    branches:
      - feat/nalufx
  release:
    types: [created]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: ❯ Build 🛠
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      BUILD_ID: ${{ github.run_id }}
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_API_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      OS: ${{ matrix.platform.os }}
      TARGET: ${{ matrix.platform.target }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: aarch64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout sources
        id: checkout
        uses: actions/checkout@v4

      - name: Install stable toolchain
        id: install-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install target
        id: install-target
        run: rustup target add ${{ env.TARGET }}

      - name: Build targets
        id: build-targets
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --workspace --release --target ${{ env.TARGET }}

      - name: Package the binary
        id: package-binary
        run: |
          mkdir -p target/package
          tar czf target/package/${{ env.TARGET }}.tar.gz -C target/${{ env.TARGET }}/release .
          echo "${{ env.TARGET }}.tar.gz=target/package/${{ env.TARGET }}.tar.gz" >> $GITHUB_ENV

      - name: Upload the binary
        id: upload-binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TARGET }}.tar.gz
          path: target/package/${{ env.TARGET }}.tar.gz

  release:
    name: ❯ Release 🚀
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Update version number
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> "$GITHUB_ENV"
        shell: /bin/bash -e {0}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Download artifacts
        run: |
          for target in ${{ env.TARGET }}; do
            echo "Downloading $target artifact"
            name="${target}.tar.gz"
            echo "Artifact name: $name"
            mkdir -p target/package
            curl -sSL -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github.v3+json" -L "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/runs/${BUILD_ID}/artifacts/${name}" -o "target/package/${name}"
          done
        env:
          VERSION: ${{ env.VERSION }}
          TARGET: ${{ env.TARGET }}
          OS: ${{ env.OS }}

      - name: Generate Changelog
        id: generate-changelog
        env:
          BUILD_ID: ${{ github.run_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_URL: https://github.com/sebastienrousseau/nalufx/releases
          TARGET: ${{ env.TARGET }}
        run: |
          if [[ ! -f CHANGELOG.md ]]; then
            changelog_file="${{ github.workspace }}/CHANGELOG.md"
            version=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
            echo "## Release v${version} - $(date +'%Y-%m-%d')" >> "${changelog_file}"
            cat TEMPLATE.md >> "${changelog_file}"
            echo "$(git log --pretty=format:'%s' --reverse HEAD)" >> "${changelog_file}"
            echo "" >> "${changelog_file}"
          fi
        shell: bash

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Serde YML 🦀 v${{ env.VERSION }}
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: true
          prerelease: false

  crate:
    name: ❯ Crate.io 🦀
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install stable toolchain
        id: install-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          path: /home/runner/.cargo/registry/index/
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      - name: Update version number
        id: update-version
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> "$GITHUB_ENV"
        shell: /bin/bash -e {0}

      - name: Log in to crates.io
        id: login-crate-io
        run: cargo login ${{ secrets.CARGO_API_TOKEN }}
      
      - name: Install jq
        run: sudo apt-get install jq

      - name: Publish Workspace Members to Crate.io
        id: publish-workspace-members
        run: |
          for MEMBER in $(cargo metadata --format-version 1 | jq -r '.workspace_members[]'); do
            MEMBER_PATH=$(cargo metadata --format-version 1 | jq -r ".packages[] | select(.id == \"${MEMBER}\") | .manifest_path" | xargs dirname)
            cd $MEMBER_PATH
            cargo publish --no-verify --allow-dirty
            cd - > /dev/null
          done
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_API_TOKEN }}
