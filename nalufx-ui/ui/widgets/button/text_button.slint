import { ButtonCore } from "button_core.slint";
import { Theme } from "../../theme.slint";

export component TextButton inherits ButtonCore {
    in property <string> text <=> i-text.text;
    in property <string> buttonType;
    in property <bool> enabled <=> i-touch-area.enabled;
    in property <bool> selected;
    in property <image> icon;
    in property <bool> has-icon: icon.width > 0 && icon.height > 0;
    callback clicked <=> i-touch-area.clicked;

    vertical-stretch: 0;
    horizontal-stretch: 0;
    min-width: 50px;
    min-height: 50px;

    states [
        disabled when !root.enabled : {
            opacity: 0.5;
            i-text.color: Theme.palette.shark-gray;
        }
        pressed when i-touch-area.pressed : {
            i-text.color: Theme.palette.white;
            rect.background: Theme.palette.nalufx-blue-700;
            rect.border-color: Theme.palette.nalufx-blue-800;
        }
        hover when i-touch-area.has-hover : {
            rect.background: Theme.palette.nalufx-blue-200;
            rect.border-color: Theme.palette.nalufx-blue-400;
        }
        primary when root.buttonType == "primary" : {
            i-text.color: Theme.palette.white;
            rect.background: Theme.palette.nalufx-blue-300;
            rect.border-color: Theme.palette.nalufx-blue-700;
        }
        secondary when root.buttonType == "secondary" : {
            i-text.color: Theme.palette.nalufx-blue-800;
            rect.background: Theme.palette.nalufx-blue-100;
            rect.border-color: Theme.palette.nalufx-blue-300;
        }
        outline when root.buttonType == "outline" : {
            i-text.color: Theme.palette.nalufx-blue-600;
            rect.background: Theme.palette.transparent;
            rect.border-width: 1px;
            rect.border-color: Theme.palette.nalufx-blue-300;
        }
        text when root.buttonType == "text" : {
            i-text.color: Theme.palette.nalufx-blue-600;
            rect.background: Theme.palette.transparent;
            rect.border-width: 0px;
        }
        icon-button when root.buttonType == "icon" : {
            rect.background: Theme.palette.transparent;
            rect.border-width: 0px;
        }
        toggle when root.buttonType == "toggle" : {
            rect.background: root.selected ? Theme.palette.nalufx-blue-600 : Theme.palette.nalufx-blue-100;
            i-text.color: root.selected ? Theme.palette.white : Theme.palette.nalufx-blue-800;
        }
        success when root.buttonType == "success" : {
            i-text.color: Theme.palette.dark-deep-blue;
            rect.background: Theme.palette.lime-green-400;
            rect.border-color: Theme.palette.lime-green-500;
        }
    ]

    rect := Rectangle {
        width: parent.width;
        height: parent.height;
        background: Theme.palette.nalufx-blue-100;
        border-width: 1px;
        border-color: Theme.palette.nalufx-blue-300;
        border-radius: 4px;

        HorizontalLayout {
            padding: Theme.spaces.small;
            spacing: Theme.spaces.small;
            alignment: center;

            if has-icon : i-icon := Image {
                source: icon;
                width: 16px;
                height: 16px;
                colorize: i-text.color;
            }

            i-text := Text {
                color: Theme.palette.white;
                horizontal-alignment: center;
                vertical-alignment: center;
                font-size: Theme.typo.label.size;
                font-weight: Theme.typo.label.weight;
            }
        }

        i-touch-area := TouchArea {}
    }

    animate opacity { duration: Theme.durations.medium; easing: ease; }
}