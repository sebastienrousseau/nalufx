import { Theme } from "../../theme.slint";
import { StateLayer } from "../../components/state_layer.slint";

/**
 * ButtonCore Component
 *
 * This component defines a highly customizable button with various properties
 * for appearance, behavior, and state management.
 *
 * Features:
 * - Customizable appearance (background, text color, font, borders, etc.)
 * - Support for left, right, and center icons
 * - Loading state
 * - Disabled state
 * - Hover and pressed states
 * - Transparent background option
 * - Minimum width and height settings
 */
export component ButtonCore {
    // Accessibility
    in property <string> accessibilityLabel;

    // Tooltip
    in property <string> tooltip;

    /// Core properties

    /**
     * Determines if the button is interactive.
     * When false, the button appears dimmed and doesn't respond to input.
     */
    in property <bool> enabled: true;

    /**
     * If true, the button has a transparent background.
     */
    in property <bool> hasTransparentBackground: false;

    /**
     * The text displayed on the button.
     */
    in property <string> buttonText: "";

    /**
     * The text displayed when the button is in a loading state.
     */
    in property <string> loadingText: "";

    /**
     * Indicates whether the button is in a loading state.
     * When true, the button displays the loading text and a progress cursor.
     */
    in-out property <bool> isLoading: false;

    /// Appearance properties

    /**
     * The default background of the button.
     */
    in property <brush> background: Theme.palette.nalufx-twilight-gradient;

    /**
     * The background color when the button is disabled.
     */
    in property <brush> disabledBackground;

    /**
     * The text color when the button is disabled.
     */
    in property <brush> disabledTextColor;

    /**
     * The background color when the button is hovered.
     */
    in property <brush> hoverBackground: background;

    /**
     * The text color when the button is hovered.
     */
    in property <brush> hoverTextColor: textColor;

    /**
     * The text color when the button is in a loading state.
     */
    in property <brush> loadingTextColor: Theme.palette.white;

    /**
     * The background color when the button is pressed.
     */
    in property <brush> pressedBackground: background;

    /**
     * The text color when the button is pressed.
     */
    in property <brush> pressedTextColor: textColor;

    /**
     * The default text color of the button.
     */
    in property <brush> textColor: Theme.palette.white;

    /**
     * The font weight of the button text.
     */
    in property <int> fontWeight: 500;

    /**
     * The border radius of the button.
     */
    in property <length> borderRadius: 4pt;

    /**
     * The border width of the button.
     */
    in property <length> borderWidth: 0pt;

    /**
     * The font size of the button text.
     */
    in property <length> fontSize: 16pt;

    /**
     * The opacity of the button when disabled.
     */
    in property <float> disabledOpacity: 0.5;

    /**
     * The minimum height of the button.
     */
    in property <length> minHeight: 0pt;

    /**
     * The minimum width of the button.
     */
    in property <length> minWidth: 0pt;

    /**
     * The padding left around the button content, based on its size and content.
     */
    in property <length> paddingLeft: 6pt;

    /**
     * The padding right around the button content, based on its size and content.
     */
    in property <length> paddingRight: 6pt;

    /// Icon properties

    /**
     * The image to be displayed at the center of the button.
     */
    in property <image> iconCenter;

    /**
     * The image to be displayed on the left side of the button text.
     */
    in property <image> iconLeft;

    /**
     * The image to be displayed on the right side of the button text.
     */
    in property <image> iconRight;

    /**
     * The size of the icons.
     */
    in property <length> iconSize: 18pt;

    /**
     * The spacing between the icon and the text.
     */
    in property <length> iconTextSpacing: 0pt;

    /// Computed properties

    /**
     * The current background color based on the button's state.
     */
    out property <brush> currentBackground: background;

    /**
     * The current text color based on the button's state.
     */
    out property <brush> currentTextColor: textColor;

    /// Callbacks

    /**
     * Emitted when the button is clicked.
     */
    callback clicked();

    /// State management
    states [
        disabled when !enabled: {
            opacity: disabledOpacity;
        }
        loading when isLoading: {
            currentTextColor: loadingTextColor;
        }
        pressed when ta.pressed: {
            currentBackground: pressedBackground;
            currentTextColor: pressedTextColor;
        }
        hover when ta.has-hover: {
            currentBackground: hoverBackground;
            currentTextColor: hoverTextColor;
        }
    ]

    /// Layout
    rect := Rectangle {
        border-color: currentTextColor;
        border-width: borderWidth;
        border-radius: borderRadius;
        background: hasTransparentBackground ? transparent : currentBackground;
        min-height: minHeight;
        min-width: minWidth;
        padding-left: paddingLeft;
        padding-right: paddingRight;

        // Main layout container
        HorizontalLayout {
            alignment: center;

            // Vertical layout for centering content
            VerticalLayout {
                alignment: center;
                spacing: iconTextSpacing;

                // Horizontal layout for button content (icons and text)
                HorizontalLayout {
                    alignment: center;
                    spacing: iconTextSpacing;

                    // Center icon (only shown if no text and icon is provided)
                    if (iconCenter.width > 0 && iconCenter.height > 0 && buttonText == ""): Image {
                        source: iconCenter;
                        width: iconSize;
                        height: iconSize;
                        colorize: transparent;
                    }

                    // Left icon
                    if (iconLeft.width > 0 && iconLeft.height > 0): Image {
                        source: iconLeft;
                        width: iconSize;
                        height: iconSize;
                        colorize: currentTextColor;
                    }

                    // Button text (or loading text when in loading state)
                    txt := Text {
                        text: isLoading ? loadingText : buttonText;
                        color: currentTextColor;
                        font-size: fontSize;
                        font-weight: fontWeight;
                        vertical-alignment: center;
                        horizontal-alignment: center;
                    }

                    // Right icon
                    if (iconRight.width > 0 && iconRight.height > 0): Image {
                        source: iconRight;
                        width: iconSize;
                        height: iconSize;
                        colorize: currentTextColor;
                    }
                }
            }
        }
    }

    /// Touch handling
    ta := TouchArea {
        width: 100%;
        height: 100%;
        mouse-cursor: enabled ? (isLoading ? MouseCursor.progress : MouseCursor.pointer) : MouseCursor.not-allowed;
        clicked => {
            if (enabled && !isLoading) { root.clicked(); }
        }
    }

    /// State layer for visual feedback
    i-state-layer := StateLayer {
        border-radius: rect.border-radius;
    }

    @children
}