import { Theme } from "../../theme.slint";
import { StateLayer } from "../../components/state_layer.slint";

/**
 * ButtonCore Component
 *
 * This component defines the basic properties and behavior for a button.
 * It includes properties for enabling/disabling the button, setting text,
 * handling loading state, and customizing appearance.
 */
export component ButtonCore {
    // Core properties
    in property <bool> enabled: true;
    in property <bool> isPlain: false;
    in property <string> buttonText: "";
    in property <string> loadingText: "";
    in-out property <bool> isLoading: false;

    // Appearance properties
    in property <brush> background: Theme.palette.nalufx-twilight-gradient;
    in property <brush> hoverBackground: background;
    in property <brush> hoverTextColor: textColor;
    in property <brush> loadingTextColor: Theme.palette.white;
    in property <brush> pressedBackground: background;
    in property <brush> pressedTextColor: textColor;
    in property <brush> textColor: Theme.palette.white;
    in property <int> fontWeight: 500;
    in property <length> borderRadius: max(self.width, self.height) / 2;
    in property <length> borderWidth: 0px;
    in property <length> fontSize: 16px;

    // Icon properties
    in property <image> iconLeft;
    in property <image> iconRight;

    // Computed properties
    private property <brush> currentBackground: background;
    private property <brush> currentTextColor: textColor;

    // Callbacks
    callback clicked();
    callback pressed();
    callback released();

    states [
        disabled when !enabled: {
            currentBackground: background.darker(20%);
            currentTextColor: textColor.darker(20%);
        }
        loading when isLoading: {
            currentTextColor: loadingTextColor;
        }
        pressed when ta.pressed: {
            currentBackground: pressedBackground;
            currentTextColor: pressedTextColor;
        }
        hover when ta.has-hover: {
            currentBackground: hoverBackground;
            currentTextColor: hoverTextColor;
        }
    ]

    rect := Rectangle {
        border-color: currentTextColor;
        border-width: borderWidth;
        border-radius: borderRadius;
        background: isPlain ? transparent : currentBackground;

        HorizontalLayout {
            spacing: 8px;
            alignment: center;

            if (iconLeft.width > 0 && iconLeft.height > 0): Image {
                source: iconLeft;
                width: 16px;
                height: 16px;
                colorize: currentTextColor;
            }

            txt := Text {
                text: isLoading ? loadingText : buttonText;
                color: currentTextColor;
                font-size: fontSize;
                font-weight: fontWeight;
                vertical-alignment: center;
                horizontal-alignment: center;
            }

            if (iconRight.width > 0 && iconRight.height > 0): Image {
                source: iconRight;
                width: 16px;
                height: 16px;
                colorize: currentTextColor;
            }
        }
    }

    ta := TouchArea {
        width: 100%;
        height: 100%;
        mouse-cursor: enabled ? (isLoading ? MouseCursor.progress : MouseCursor.pointer) : MouseCursor.not-allowed;

        clicked => {
            if (enabled && !isLoading) { root.clicked(); }
        }
    }

    i-state-layer := StateLayer {
        border-radius: rect.border-radius;
    }

    @children
}